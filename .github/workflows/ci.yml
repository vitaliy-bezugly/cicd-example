name: .NET CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Setup .NET SDK manually
      run: |
        wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
        chmod +x dotnet-install.sh
        ./dotnet-install.sh --version 8.0.100
        echo "$HOME/.dotnet" >> $GITHUB_PATH
        export PATH="$HOME/.dotnet:$PATH"
    
    - name: Cache nuget packages
      uses: actions/cache@v3
      with: 
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Test
      run: dotnet test --no-build --verbosity normal

  docker_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repo (needed for context)
      uses: actions/checkout@v4

    - name: Extract version from csproj
      id: extract_version
      run: |
        VERSION=$(grep -oP '<Version>\K[^<]+' HelloWorld.Console/HelloWorld.Console.csproj)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Extracted version: $VERSION"
      
    - name: Extract branch name
      id: extract_branch
      run: |
        BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        echo "Extracted branch name: $BRANCH_NAME"
      
    - name: Extract commit hash
      id: extract_hash
      run: |
        COMMIT_HASH=$(echo "${GITHUB_SHA}" | cut -c1-6)
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
        echo "Extracted commit hash: $COMMIT_HASH"

    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login docker.io \
          --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin
    
    - name: Build Docker image
      run: |
        IMAGE_TAG="docker.io/${{ secrets.DOCKER_USERNAME }}/hello-world:${BRANCH_NAME}-${BRANCH_NAME}-${VERSION}v"
        LATEST_TAG="docker.io/${{ secrets.DOCKER_USERNAME }}/hello-world:latest"
        docker build --file Dockerfile --tag "$IMAGE_TAG" --tag "$LATEST_TAG" .
    
    - name: Push Docker image
      run: |
        docker push "$IMAGE_TAG"
        docker push "$LATEST_TAG"